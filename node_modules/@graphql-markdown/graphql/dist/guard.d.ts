/**
 * Custom GraphQL type guards and property guards.
 *
 * @packageDocumentation
 */
import type { GraphQLDirective, GraphQLField, GraphQLOperationType, DeprecatedType } from "@graphql-markdown/types";
export { isDirective as isDirectiveType, isEnumType, isInputObjectType as isInputType, isInterfaceType, isLeafType, isListType, isNamedType, isNonNullType, isObjectType, isScalarType, isType, isUnionType, } from "graphql/type";
export { isNode } from "graphql/language/ast";
/**
 * Checks if a GraphQL named type is of type `GraphQLField`.
 *
 * @param type - a GraphQL type.
 *
 */
export declare const isGraphQLFieldType: (type: unknown) => type is GraphQLField<unknown, unknown, unknown>;
/**
 * Checks if a GraphQL named type is of generic type `T`.
 *
 * @typeParam T - a GraphQL type to check against, eg `GraphQLObjectType`.
 * @param obj - a GraphQL named type from the GraphQL schema.
 * @param type - the GraphQL type `T`.
 *
 */
export declare const instanceOf: <T>(obj: unknown, type: new () => T) => obj is new () => T;
/**
 * Checks if a GraphQL named type is deprecated.
 *
 * @typeParam T - a GraphQL type to check against, eg `GraphQLObjectType`.
 * @param obj - an instance of `T`.
 *
 */
export declare const isDeprecated: <T>(obj: T) => obj is DeprecatedType<T>;
/**
 * Checks if a GraphQL type a GraphQL operation (query, mutation, subscription).
 *
 * @param type - a GraphQL type.
 *
 */
export declare const isOperation: (type: unknown) => type is GraphQLOperationType;
/**
 * Checks if a directive is executable (related to operations).
 *
 * @param type - a GraphQL directive.
 *
 */
export declare const executableDirectiveLocation: (directive: GraphQLDirective) => boolean;
/**
 * Checks if a directive is system (related to schema definition).
 *
 * @param type - a GraphQL directive.
 *
 */
export declare const typeSystemDirectiveLocation: (directive: GraphQLDirective) => boolean;
/**
 * Checks if a type belongs to API (operation related).
 *
 * @param type - a GraphQL type.
 *
 */
export declare const isApiType: (type: unknown) => boolean;
/**
 * Checks if a type belongs to schema (schema type definition excluding operations related types).
 *
 * @param type - a GraphQL type.
 *
 */
export declare const isSystemType: (type: unknown) => boolean;
