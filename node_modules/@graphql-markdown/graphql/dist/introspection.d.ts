/**
 * Library for introspecting a GraphQL schema.
 * The entry point method is {@link getSchemaMap}.
 *
 * @packageDocumentation
 */
import { GraphQLObjectType } from "graphql/type";
import { DirectiveLocation } from "graphql/language";
import type { ASTNode, AstNodeType, GraphQLDirective, GraphQLFieldMap, GraphQLInputFieldMap, GraphQLOperationType, GraphQLSchema, Maybe, SchemaMap } from "@graphql-markdown/types";
export { printSchema } from "graphql/utilities";
export { getNamedType, getNullableType, GraphQLSchema } from "graphql/type";
export { parse, print } from "graphql/language";
/**
 *
 * @example
 */
export declare class IntrospectionError extends Error {
}
/**
 * Returns a map of GraphQL named types from a schema for a defined GraphQL type.
 * When parsing the entities, internal GraphQL entities (starting with `__`) are excluded.
 *
 * @see {@link getSchemaMap}
 *
 * @internal
 *
 * @param schema - a GraphQL schema.
 * @param type - a GraphQL type, eg `GraphQLObjectType`.
 *
 * @returns a map of GraphQL named types for the matching GraphQL type, or undefined if no match.
 *
 */
export declare const getTypeFromSchema: <T>(schema: Maybe<GraphQLSchema>, type: unknown) => Maybe<Record<string, T>>;
/**
 * Type guard for type with an AST node property.
 *
 * @internal
 *
 * @param node - a GraphQL schema named type.
 *
 * @returns `true` if the entity has an AST node property, else `false`.
 *
 */
export declare const hasAstNode: <T>(node: T) => node is AstNodeType<T>;
/**
 *
 */
export declare const getDirectiveLocationForASTPath: (appliedTo: Maybe<ASTNode>) => DirectiveLocation;
/** Check if a directive can be applied to specific schema entity location.
 *
 * @param entity - a GraphQL schema entity.
 * @param directive - a directive name.
 *
 * @returns `true` if the entity is a valid directive location, else `false`.
 *
 */
export declare const isValidDirectiveLocation: (entity: unknown, directive: GraphQLDirective) => boolean;
/**
 * Checks if a schema entity as a directive belonging to a defined set.
 *
 * @param entity - a GraphQL schema entity.
 * @param directives - a directive name or a list of directive names.
 * @param fallback - default value if the entity type is not a valid location for directives.
 *
 * @returns `true` if the entity has at least one directive matching, else `false`.
 *
 */
export declare const hasDirective: (entity: unknown, directives: Maybe<GraphQLDirective[]>, fallback?: boolean) => boolean;
/**
 * Returns a schema entity's list of directives matching a defined set.
 *
 * @param entity - a GraphQL schema entity.
 * @param directives - a directive name or a list of directive names.
 *
 * @returns a list of GraphQL directives matching the set, else `false`.
 *
 */
export declare const getDirective: (entity: unknown, directives: Maybe<GraphQLDirective[]>) => GraphQLDirective[];
/**
 * Returns all directive's arguments' values linked to a GraphQL schema type.
 *
 * @param directive - a GraphQL directive defined in the schema.
 * @param type - the GraphQL schema type to parse.
 *
 * @returns a record k/v with arguments' name as keys and arguments' value.
 *
 */
export declare const getTypeDirectiveValues: (directive: GraphQLDirective, type: unknown) => Maybe<Record<string, unknown>>;
/**
 * Returns one directive's argument's value linked to a GraphQL schema type.
 * It calls {@link getTypeDirectiveValues} and returns a matching record.
 *
 * @param directive - a GraphQL directive defined in the schema.
 * @param type - the GraphQL schema type to parse.
 * @param argName - the name of the GraphQL directive argument to fetch the value from.
 *
 * @returns a record k/v with `argName` as key and the argument's value.
 *
 */
export declare const getTypeDirectiveArgValue: (directive: GraphQLDirective, node: unknown, argName: string) => Maybe<Record<string, unknown> | string>;
/**
 * Returns the fields from a GraphQL schema type.
 *
 * @internal
 *
 * see {@link getOperation}, {@link getFields}
 *
 * @param type - the GraphQL schema type to parse.
 * @param processor - optional callback function to parse the fields map.
 * @param fallback - optional fallback value, `undefined` if not set.
 *
 * @returns a map of fields as k/v records, or `fallback` value if no fields available.
 *
 */
export declare const _getFields: <T, V>(type: T, 
/**
 * @param fieldMap - a field map to be processed.
 * @returns a new field map.
 */
processor?: (fieldMap: Record<string, unknown>) => V, fallback?: V) => GraphQLFieldMap<unknown, unknown> | GraphQLInputFieldMap | GraphQLObjectType | V;
/**
 * Returns fields map for a GraphQL operation type (query, mutation, subscription...).
 *
 * @internal
 *
 * see {@link getSchemaMap}
 *
 * @param operationType - the operation type to parse.
 *
 * @returns a map of fields as k/v records.
 *
 */
export declare const getOperation: (operationType?: unknown) => Record<string, GraphQLOperationType>;
/**
 * Returns fields map for a GraphQL schema type.
 *
 * see {@link getSchemaMap}
 *
 * @param type - the GraphQL schema type to parse.
 *
 * @returns a list of fields of type object.
 *
 */
export declare const getFields: (type: unknown) => unknown[];
/**
 * Resolves the name of a GraphQL schema type.
 *
 * @param getTypeName - the GraphQL schema type to parse.
 * @param defaultName - optional fallback value if the name resolution fails.
 *
 * @returns the type's name, or `defaultName`.
 *
 */
export declare const getTypeName: (type: unknown, defaultName?: string) => string;
/**
 * Returns an introspection map of the GraphQL schema.
 * This is the entry point for GraphQL-Markdown schema parsing features.
 *
 * @param schema - a GraphQL schema.
 *
 * @returns a schema map by GraphQL entities (see {@link SchemaEntity}).
 *
 * @example
 * ```js
 * import { buildSchema } from "graphql";
 * import { getSchemaMap } from "@graphql-markdown/utils/graphql";
 *
 * const schema = buildSchema(`
 *   interface Record {
 *     id: String!
 *   }
 *   type StudyItem implements Record {
 *     id: String!
 *     subject: String!
 *     duration: Int!
 *   }
 *   type Query {
 *     getStudyItems(subject: String): [StudyItem!]
 *     getStudyItem(id: String!): StudyItem
 *   }
 *   type Mutation {
 *     addStudyItem(subject: String!, duration: Int!): StudyItem
 *   }
 *   type Subscription {
 *     listStudyItems: [StudyItem!]
 *   }
 * `);
 *
 * const schemaTypeMap = getSchemaMap(schema);
 *
 * // expected result: {
 * //   queries: {
 * //     getStudyItems: GraphQLField,
 * //     getStudyItem: GraphQLField,
 * //   },
 * //   mutations: {
 * //     addStudyItem: GraphQLField,
 * //   },
 * //   subscriptions: {
 * //     listStudyItems: GraphQLField,
 * //   }
 * //   directives: {
 * //     include: GraphQLDirective,
 * //     skip: GraphQLDirective,
 * //     deprecated: GraphQLDirective,
 * //     specifiedBy: GraphQLDirective,
 * //   objects: {
 * //     StudyItem: GraphQLObjectType,
 * //   unions: {},
 * //   interfaces: {
 * //     Record: GraphQLInterfaceType,
 * //   enums: {},
 * //   inputs: {},
 * //   scalars: {
 * //     String: GraphQLScalarType,
 * //     Int: GraphQLScalarType,
 * //     Boolean: GraphQLScalarType,
 * //   }
 * // }
 * ```
 *
 */
export declare const getSchemaMap: (schema: Maybe<GraphQLSchema>) => SchemaMap;
