/**
 * Library supporting `relatedTypeSection` for displaying relations between GraphQL schema entities.
 *
 * @see [Option `relatedTypeSection`](https://graphql-markdown.dev/docs/settings#printtypeoptions)
 *
 * @packageDocumentation
 */
import type { GraphQLUnionType } from "graphql";
import type { GraphQLOperationType, IGetRelation, RelationOfField, RelationOfImplementation, RelationOfInterface } from "@graphql-markdown/types";
/**
 * Returns a map of operations (queries, mutations, subscriptions) where the GraphQL schema type is the return type.
 *
 * @see {@link mapRelationOf}
 *
 * @typeParam T - the type of the GraphQL schema type.
 * @typeParam R - the return type of map of relations (see {@link IGetRelation}).
 *
 * @param type - the GraphQL schema type being processed.
 * @param schemaMap - a GraphQL schema map (see {@link introspection!getSchemaMap}).
 *
 * @returns a record map of operations relations.
 *
 */
export declare const getRelationOfReturn: IGetRelation<GraphQLOperationType>;
/**
 * Returns a map of fields and arguments where the GraphQL schema type matches the type.
 *
 * @see {@link mapRelationOf}
 *
 * @typeParam T - the type of the GraphQL schema type.
 * @typeParam R - the return type of map of relations (see {@link IGetRelation}).
 *
 * @param type - the GraphQL schema type being processed.
 * @param schemaMap - a GraphQL schema map (see {@link introspection!getSchemaMap}).
 *
 * @returns a record map of fields and arguments relations.
 *
 */
export declare const getRelationOfField: IGetRelation<RelationOfField>;
/**
 * Returns a map of unions where the GraphQL schema type is part of it.
 *
 * @see {@link mapRelationOf}
 *
 * @typeParam T - the type of the GraphQL schema type.
 * @typeParam R - the return type of map of relations (see {@link IGetRelation}).
 *
 * @param type - the GraphQL schema type being processed.
 * @param schemaMap - a GraphQL schema map (see {@link introspection!getSchemaMap}).
 *
 * @returns a record map of unions relations.
 *
 */
export declare const getRelationOfUnion: IGetRelation<GraphQLUnionType>;
/**
 * Returns a map of interfaces where the GraphQL schema type is extended.
 *
 * @see {@link mapRelationOf}
 *
 * @typeParam T - the type of the GraphQL schema type.
 * @typeParam R - the return type of map of relations (see {@link IGetRelation}).
 *
 * @param type - the GraphQL schema type being processed.
 * @param schemaMap - a GraphQL schema map (see {@link introspection!getSchemaMap}).
 *
 * @returns a record map of interfaces relations.
 *
 */
export declare const getRelationOfInterface: IGetRelation<RelationOfInterface>;
/**
 * Returns a map of types (unions or interfaces) where the GraphQL schema type is implemented.
 *
 * @see {@link mapRelationOf}
 *
 * @typeParam T - the type of the GraphQL schema type.
 * @typeParam R - the return type of map of relations (see {@link IGetRelation}).
 *
 * @param type - the GraphQL schema type being processed.
 * @param schemaMap - a GraphQL schema map (see {@link introspection!getSchemaMap}).
 *
 * @returns a record map of unions or interfaces relations.
 *
 */
export declare const getRelationOfImplementation: IGetRelation<RelationOfImplementation>;
