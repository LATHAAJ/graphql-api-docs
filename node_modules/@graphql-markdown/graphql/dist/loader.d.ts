/**
 * Library for GraphQL schema loading and `loaders` config processing.
 *
 * @packageDocumentation
 */
import { GraphQLSchema, OperationTypeNode } from "graphql";
import type { LoaderOption, LoadSchemaOptions, Maybe } from "@graphql-markdown/types";
export { GraphQLSchema } from "graphql";
/**
 * Wrapper method for `@graphql-tools/load.loadSchema` to load asynchronously a GraphQL Schema from a source.
 * The wrapper will load the schema using the loader declared in `options`.
 * If `rootTypes` is set in the options, then the schema root types will be overridden to generate custom GraphQL schema.
 *
 * @param schemaLocation - the schema location pointer matching the loader.
 * @param options - the schema `loaders`, and optional `rootTypes` override.
 *
 * @returns a GraphQL schema.
 *
 * @example
 * ```js
 * import { loadSchema } from "@graphql-markdown/utils/graphql"
 *
 * const schema = await loadSchema("schema.graphql", {
 *   loaders: [new GraphQLFileLoader()],
 *   rootTypes: { query: "Root", subscription: "" },
 * });
 * ```
 */
/**
 *
 */
export declare const loadSchema: (schemaLocation: string, options: LoadSchemaOptions & {
    /**
     * @param rootTypes - optional `rootTypes` schema override
     * @see [Custom root types](https://graphql-markdown.dev/docs/advanced/custom-root-types)
     */
    rootTypes?: Partial<Record<OperationTypeNode, string>>;
}) => Promise<GraphQLSchema>;
/**
 * Asynchronously returns a valid loaders list for {@link loadSchema} based on the plugin config.
 * Import each loader package, and instantiate a loader object.
 *
 * @param loadersList - the list of loaders defined in the plugin config.
 *
 * @returns a list of loader objects.
 *
 * @throws an `Error` if no loader has been loaded, or if an error occurred while importing loaders.
 *
 * @example
 * ```js
 * import { getDocumentLoaders, loadSchema } from "@graphql-markdown/utils/graphql"
 *
 * const loaderList = {
 *   GraphQLFileLoader: "@graphql-tools/graphql-file-loader",
 * };
 *
 * const loaders = await getDocumentLoaders(loaderList);
 *
 * const schema = await loadSchema("schema.graphql", {
 *   loaders,
 *   rootTypes: { query: "Root", subscription: "" },
 * });
 * ```
 */
/**
 *
 */
export declare const getDocumentLoaders: (loadersList: Maybe<LoaderOption>) => Promise<Maybe<LoadSchemaOptions>>;
