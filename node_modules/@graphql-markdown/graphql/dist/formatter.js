"use strict";
/**
 * Internal library of helpers for formatting GraphQL values.
 *
 * @packageDocumentation
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFormattedDefaultValue = void 0;
const type_1 = require("graphql/type");
/**
 * Format an enum or scalar GraphQL type value into a printable equivalent based on the type.
 *
 * @internal
 *
 * @param type - the GraphQL schema type.
 * @param defaultValue - the GraphQL schema type's value to be processed
 *
 * @returns a printable formatted value.
 *
 */
const _formatDefaultValue = (type, defaultValue) => {
    if ((0, type_1.isEnumType)(type)) {
        return defaultValue;
    }
    switch (type) {
        case type_1.GraphQLInt:
        case type_1.GraphQLFloat:
        case type_1.GraphQLBoolean:
            return defaultValue;
        case type_1.GraphQLID:
        case type_1.GraphQLString:
            return `"${defaultValue}"`;
        default:
            return defaultValue;
    }
};
/**
 * Format a list GraphQL type value into a printable equivalent.
 *
 * @internal
 *
 * @param type - the GraphQL schema type.
 * @param defaultValue - the GraphQL schema type's value to be processed
 *
 * @returns a printable formatted value.
 *
 */
const _formatListDefaultValues = (type, defaultValue) => {
    if (typeof type === "undefined" || type === null) {
        return "";
    }
    const defaultValues = Array.isArray(defaultValue)
        ? defaultValue
        : [defaultValue];
    const defaultValuesString = defaultValues.map((defaultValue) => {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        return (0, exports.getFormattedDefaultValue)({ type, defaultValue });
    });
    return `[${defaultValuesString.join(", ")}]`;
};
const _formatInputDefaultValues = (type, defaultValue) => {
    if (typeof type === "undefined" || type === null) {
        return "";
    }
    if ((0, type_1.isInputObjectType)(type) && typeof defaultValue === "object") {
        const fields = type.getFields();
        const fieldStrings = Object.entries(defaultValue)
            .map(([key, value]) => {
            if (key in fields) {
                const fieldType = fields[key].type;
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                const formattedValue = (0, exports.getFormattedDefaultValue)({
                    type: fieldType,
                    defaultValue: value,
                });
                return `${key}: ${formattedValue}`;
            }
            return "";
        })
            .filter((str) => {
            return str !== "";
        });
        return `{ ${fieldStrings.join(", ")} }`;
    }
    return _formatDefaultValue(type, defaultValue);
};
/**
 * Returns a printable formatted value for a GraphQL type.
 * This is the generic function.
 *
 * @param entity - the GraphQL schema entity processed.
 *
 * @returns a printable formatted value.
 *
 */
const getFormattedDefaultValue = ({ type, defaultValue, }) => {
    if (typeof type === "undefined" ||
        type === null ||
        typeof defaultValue === "undefined" ||
        defaultValue === null) {
        return undefined;
    }
    if ((0, type_1.isListType)(type)) {
        return _formatListDefaultValues((0, type_1.getNamedType)(type), defaultValue);
    }
    if ((0, type_1.isInputObjectType)(type)) {
        return _formatInputDefaultValues(type, defaultValue);
    }
    return _formatDefaultValue(type, defaultValue);
};
exports.getFormattedDefaultValue = getFormattedDefaultValue;
