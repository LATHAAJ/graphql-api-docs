"use strict";
/**
 * Library for GraphQL schema loading and `loaders` config processing.
 *
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDocumentLoaders = exports.loadSchema = exports.GraphQLSchema = void 0;
const graphql_1 = require("graphql");
const load_1 = require("@graphql-tools/load");
var graphql_2 = require("graphql");
Object.defineProperty(exports, "GraphQLSchema", { enumerable: true, get: function () { return graphql_2.GraphQLSchema; } });
/**
 * Wrapper method for `@graphql-tools/load.loadSchema` to load asynchronously a GraphQL Schema from a source.
 * The wrapper will load the schema using the loader declared in `options`.
 * If `rootTypes` is set in the options, then the schema root types will be overridden to generate custom GraphQL schema.
 *
 * @param schemaLocation - the schema location pointer matching the loader.
 * @param options - the schema `loaders`, and optional `rootTypes` override.
 *
 * @returns a GraphQL schema.
 *
 * @example
 * ```js
 * import { loadSchema } from "@graphql-markdown/utils/graphql"
 *
 * const schema = await loadSchema("schema.graphql", {
 *   loaders: [new GraphQLFileLoader()],
 *   rootTypes: { query: "Root", subscription: "" },
 * });
 * ```
 */
/**
 *
 */
const loadSchema = async (schemaLocation, options) => {
    let rootTypes = undefined;
    if (typeof options !== "undefined" && "rootTypes" in options) {
        rootTypes = options.rootTypes;
        delete options.rootTypes;
    }
    const schema = await (0, load_1.loadSchema)(schemaLocation, options);
    if (!rootTypes) {
        return schema;
    }
    const config = {
        ...schema.toConfig(),
        query: schema.getType(rootTypes.query ?? graphql_1.OperationTypeNode.QUERY),
        mutation: schema.getType(rootTypes.mutation ?? graphql_1.OperationTypeNode.MUTATION),
        subscription: schema.getType(rootTypes.subscription ?? graphql_1.OperationTypeNode.SUBSCRIPTION),
    };
    return new graphql_1.GraphQLSchema(config);
};
exports.loadSchema = loadSchema;
/**
 * Asynchronously returns a valid loaders list for {@link loadSchema} based on the plugin config.
 * Import each loader package, and instantiate a loader object.
 *
 * @param loadersList - the list of loaders defined in the plugin config.
 *
 * @returns a list of loader objects.
 *
 * @throws an `Error` if no loader has been loaded, or if an error occurred while importing loaders.
 *
 * @example
 * ```js
 * import { getDocumentLoaders, loadSchema } from "@graphql-markdown/utils/graphql"
 *
 * const loaderList = {
 *   GraphQLFileLoader: "@graphql-tools/graphql-file-loader",
 * };
 *
 * const loaders = await getDocumentLoaders(loaderList);
 *
 * const schema = await loadSchema("schema.graphql", {
 *   loaders,
 *   rootTypes: { query: "Root", subscription: "" },
 * });
 * ```
 */
/**
 *
 */
const getDocumentLoaders = async (loadersList) => {
    const loaders = [];
    const loaderOptions = {};
    if (typeof loadersList !== "object" || loadersList === null) {
        return undefined;
    }
    for (const [className, graphqlDocumentLoader] of Object.entries(loadersList)) {
        if (typeof graphqlDocumentLoader === "string") {
            const { [className]: Loader } = await Promise.resolve(`${graphqlDocumentLoader}`).then(s => __importStar(require(s)));
            loaders.push(new Loader());
        }
        else {
            if (typeof graphqlDocumentLoader.module === "undefined") {
                throw new Error(`Wrong format for plugin loader "${className}", it should be {module: String, options?: Object}`);
            }
            const { [className]: Loader } = await Promise.resolve(`${graphqlDocumentLoader.module}`).then(s => __importStar(require(s)));
            loaders.push(new Loader());
            Object.assign(loaderOptions, graphqlDocumentLoader.options);
        }
    }
    if (loaders.length < 1) {
        throw new Error("No GraphQL document loaders available.");
    }
    return { ...loaderOptions, loaders };
};
exports.getDocumentLoaders = getDocumentLoaders;
