"use strict";
/**
 * Internal library for prettifying files using `prettier`.
 *
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.prettifyMarkdown = exports.prettify = void 0;
/**
 * Prettify a string using @see [prettier.format](https://prettier.io/docs/en/api#prettierformatsource-options)
 *
 * @remarks
 * This function logs a warning message on error.
 *
 * @internal
 *
 * @see [Prettier doc for the list of parsers](https://prettier.io/docs/en/options#parser)
 *
 * @param content - the string to be prettified.
 * @param parser - the `prettier` parser to use.
 *
 * @returns a prettified string, or undefined if an error occurred.
 *
 */
const prettify = async (content, parser) => {
    try {
        const { resolveConfigFile, resolveConfig, format } = await Promise.resolve().then(() => __importStar(require("prettier")));
        const file = await resolveConfigFile();
        let options = {};
        if (file) {
            options = (await resolveConfig(file)) ?? {};
        }
        return await format(content, { ...options, parser });
    }
    catch {
        const message = `Prettier is not found or not configured. Please install it or disable the "pretty" option.`;
        if ("logger" in global && global.logger) {
            global.logger._log(message);
        }
        else {
            global.console.log(message);
        }
        return undefined;
    }
};
exports.prettify = prettify;
/**
 * Prettify a Markdown string using {@link prettify} and `markdown` parser.
 *
 * @remarks
 * Same as `prettify(content, "mdx")`.
 *
 * @see {@link prettify}
 *
 * @internal
 *
 * @param content - the string to be prettified.
 *
 * @returns a prettified string, or undefined if an error occurred.
 *
 */
const prettifyMarkdown = async (content) => {
    return (0, exports.prettify)(content, "mdx");
};
exports.prettifyMarkdown = prettifyMarkdown;
