"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatFrontMatterProp = exports.formatFrontMatterList = exports.formatFrontMatterObject = void 0;
const string_1 = require("./string");
/**
 * Generates a string of repeated tab characters based on the given indentation level.
 *
 * @param indentation - The number of indentation levels. Defaults to 0.
 * @returns A string containing repeated tab characters.
 *
 * @example
 * ```typescript
 * tabs(2); // "    "
 * tabs(0); // ""
 * ```
 */
const tabs = (indentation = 0) => {
    return "  ".repeat(indentation);
};
/**
 * Formats an object into a front matter YAML-like structure as string array.
 *
 * @param props - The object to format.
 * @param indentation - The current indentation level. Defaults to 0.
 * @param prefix - An optional prefix for each line.
 * @returns An array of strings representing the formatted front matter.
 *
 * @example
 * ```typescript
 * const obj = { title: "My Title", tags: ["tag1", "tag2"] };
 * formatFrontMatterObject(obj);
 * // [
 * //   "  title: My Title",
 * //   "  tags:",
 * //   "    - tag1",
 * //   "    - tag2"
 * // ]
 * ```
 */
const formatFrontMatterObject = (props, indentation = 0, prefix) => {
    const frontMatter = [];
    if (!props || typeof props !== "object") {
        return frontMatter;
    }
    for (const [key, value] of Object.entries(props)) {
        frontMatter.push(
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        ...(0, exports.formatFrontMatterProp)({ [key]: value }, indentation + 1, prefix));
        prefix = " ".repeat(prefix?.length ?? 0);
    }
    return frontMatter;
};
exports.formatFrontMatterObject = formatFrontMatterObject;
/**
 * Formats an array into a front matter YAML-like structure as string array.
 *
 * @param prop - The array to format.
 * @param indentation - The current indentation level. Defaults to 0.
 * @param prefix - The prefix for each list item. Defaults to "- ".
 * @returns An array of strings representing the formatted front matter list.
 *
 * @example
 * ```typescript
 * const list = ["item1", "item2"];
 * formatFrontMatterList(list);
 * // [
 * //   "- item1",
 * //   "- item2"
 * // ]
 * ```
 */
const formatFrontMatterList = (prop, indentation = 0, prefix = "- ") => {
    const frontMatter = [];
    if (!Array.isArray(prop)) {
        return frontMatter;
    }
    prop.forEach((entry) => {
        if (typeof entry === "object") {
            frontMatter.push(...(0, exports.formatFrontMatterObject)(entry, -1, prefix).map((item) => {
                return `${tabs(indentation)}${item}`;
            }));
        }
        else {
            frontMatter.push(`${tabs(indentation)}- ${(0, string_1.toString)(entry)}`);
        }
    });
    return frontMatter;
};
exports.formatFrontMatterList = formatFrontMatterList;
/**
 * Formats a single property into a front matter YAML-like structure as string array.
 *
 * @param prop - The property to format, represented as an object with a single key-value pair.
 * @param indentation - The current indentation level. Defaults to 0.
 * @param prefix - An optional prefix for the property.
 * @returns An array of strings representing the formatted front matter property.
 *
 * @example
 * ```typescript
 * const prop = { title: "My Title" };
 * formatFrontMatterProp(prop);
 * // [
 * //   "title: My Title"
 * // ]
 * ```
 */
const formatFrontMatterProp = (prop, indentation = 0, prefix) => {
    if (typeof prop === "undefined" || prop === null) {
        return [];
    }
    const [key, value] = Object.entries(prop)[0];
    const index = `${tabs(indentation)}${prefix ?? ""}${key}:`;
    switch (true) {
        case typeof value !== "string" && Array.isArray(value):
            return [index, ...(0, exports.formatFrontMatterList)(value, indentation + 1, prefix)];
        case typeof value === "object" && value !== null:
            return [index, ...(0, exports.formatFrontMatterObject)(value, indentation, prefix)];
        default:
            return [`${index} ${value}`];
    }
};
exports.formatFrontMatterProp = formatFrontMatterProp;
