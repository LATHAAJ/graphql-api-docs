"use strict";
/**
 * Library of helper functions for handling files and folders.
 *
 * @packageDocumentation
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveFile = exports.ensureDir = exports.fileExists = exports.copyFile = exports.readFile = void 0;
const promises_1 = require("node:fs/promises");
const node_path_1 = require("node:path");
var promises_2 = require("node:fs/promises");
Object.defineProperty(exports, "readFile", { enumerable: true, get: function () { return promises_2.readFile; } });
Object.defineProperty(exports, "copyFile", { enumerable: true, get: function () { return promises_2.copyFile; } });
/**
 * Asynchronously check if a file or folder exists at the path location.
 *
 *
 * @param location - file or folder location.
 *
 * @example
 * ```js
 * import { fileExists } from '@graphql-markdown/utils/fs';
 *
 * await fileExists("./.temp/local")
 *
 * // Expected true if path is valid, false if not
 * ```
 *
 * @returns `true` if the path is valid, else `false` if not.
 *
 */
const fileExists = async (location) => {
    try {
        const stats = await (0, promises_1.stat)(location);
        return typeof stats === "object";
    }
    catch {
        return false;
    }
};
exports.fileExists = fileExists;
/**
 * Asynchronously create a folder structure if it does not exist.
 *
 *
 * @param location - folder structure in path format.
 *
 * @example
 * ```js
 * import { ensureDir } from '@graphql-markdown/utils/fs';
 *
 * await ensureDir("./.temp/local")
 *
 * // Creates both folders if they do not exists.
 * ```
 *
 */
const ensureDir = async (location, options) => {
    if (!(await (0, exports.fileExists)(location))) {
        await (0, promises_1.mkdir)(location, { recursive: true });
        return;
    }
    if (options && options.forceEmpty === true) {
        await (0, promises_1.rm)(location, { recursive: true });
        await (0, exports.ensureDir)(location);
    }
};
exports.ensureDir = ensureDir;
/**
 * Asynchronously save a file with a string content at specified location in local FS.
 * Override the file content if the file already exists.
 * The function calls `ensureDir(dirname(location))` to create the folder structure if missing.
 *
 *
 * @param location - file location.
 * @param content - data to be written into the file (UTF-8 string).
 * @param prettify - optional callback function for prettifying the content.
 *
 * @example
 * ```js
 * import { saveFile } from '@graphql-markdown/utils/fs';
 *
 * await saveFile("./.temp/local.md", "foobar")
 *
 * // Created .temp folder if it does not exists, and save data into local.md
 * ```
 *
 * @returns `true` if the path is valid, else `false` if not.
 *
 */
const saveFile = async (location, content, prettify) => {
    if (typeof prettify === "function") {
        content = (await prettify(content)) ?? content;
    }
    await (0, exports.ensureDir)((0, node_path_1.dirname)(location));
    await (0, promises_1.writeFile)(location, content, "utf8");
};
exports.saveFile = saveFile;
