"use strict";
/**
 * Logger singleton module.
 *
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = exports.Logger = exports.LogLevel = void 0;
/**
 * Log levels.
 *
 */
var LogLevel;
(function (LogLevel) {
    LogLevel["debug"] = "debug";
    LogLevel["error"] = "error";
    LogLevel["info"] = "info";
    LogLevel["log"] = "log";
    LogLevel["success"] = "success";
    LogLevel["warn"] = "warn";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
/**
 * Instantiate a logger module.
 * By default, the logger module uses `global.console`
 *
 * @param moduleName - optional name of the logger package.
 *
 * @example
 * ```js
 * import Logger, { log } from "@graphql-markdown/utils/logger";
 *
 * log("Info message"); // Expected console output "Info message"
 *
 * Logger("@docusaurus/logger");
 * log("Info message", "info"); // Expected Docusaurus log output "Info message"
 * ```
 *
 */
const Logger = async (moduleName) => {
    if (global.logger?.instance && typeof moduleName === "undefined") {
        return;
    }
    const instance = typeof moduleName === "string" && moduleName !== ""
        ? (await Promise.resolve(`${moduleName}`).then(s => __importStar(require(s)))).default
        : global.console;
    const _log = (message, level = LogLevel.info) => {
        const fallback = instance[LogLevel.info];
        const callback = typeof instance[level] === "function" ? instance[level] : fallback;
        callback?.apply(this, [message]);
    };
    global.logger = { instance, _log };
};
exports.Logger = Logger;
/**
 * Logs a message by calling the active logger instance.
 *
 * @remarks
 * If a log level is not supported by the logger instance, then it defaults to `"info"`.
 *
 * @param message - a string to be logged.
 * @param level - optional log level, `"info"` by default.
 *
 * @example
 * ```js
 * import { log } from "@graphql-markdown/utils/logger";
 *
 * log("Info message"); // Expected console output "Info message"
 * ```
 *
 */
const log = (message, level = LogLevel.info) => {
    new Promise((resolve) => {
        resolve((0, exports.Logger)());
    }).catch(() => { });
    global.logger?._log(message, level);
};
exports.log = log;
/** @alias */
exports.default = exports.Logger;
