/**
 * Logger singleton module.
 *
 * @packageDocumentation
 */
import type { LoggerType, Maybe } from "@graphql-markdown/types";
declare global {
    var logger: Maybe<LoggerType>;
}
/**
 * Log levels.
 *
 */
export declare enum LogLevel {
    debug = "debug",
    error = "error",
    info = "info",
    log = "log",
    success = "success",
    warn = "warn"
}
/**
 * Instantiate a logger module.
 * By default, the logger module uses `global.console`
 *
 * @param moduleName - optional name of the logger package.
 *
 * @example
 * ```js
 * import Logger, { log } from "@graphql-markdown/utils/logger";
 *
 * log("Info message"); // Expected console output "Info message"
 *
 * Logger("@docusaurus/logger");
 * log("Info message", "info"); // Expected Docusaurus log output "Info message"
 * ```
 *
 */
export declare const Logger: (moduleName?: string) => Promise<void>;
/**
 * Logs a message by calling the active logger instance.
 *
 * @remarks
 * If a log level is not supported by the logger instance, then it defaults to `"info"`.
 *
 * @param message - a string to be logged.
 * @param level - optional log level, `"info"` by default.
 *
 * @example
 * ```js
 * import { log } from "@graphql-markdown/utils/logger";
 *
 * log("Info message"); // Expected console output "Info message"
 * ```
 *
 */
export declare const log: (message: string, level?: LogLevel | keyof typeof LogLevel) => void;
/** @alias */
export default Logger;
