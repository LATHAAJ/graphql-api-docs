"use strict";
/**
 * Module for handling GraphQL directive printing and formatting.
 * Provides utilities to generate string representations of GraphQL directives
 * including their metadata, arguments, and locations.
 *
 * @module
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printCodeDirective = exports.printDirectiveMetadata = void 0;
const graphql_1 = require("@graphql-markdown/graphql");
const section_1 = require("../section");
const code_1 = require("../code");
/**
 * Generates a string representation of directive locations.
 *
 * @param type - The GraphQL directive to process
 * @returns A formatted string of directive locations or empty string if no locations defined
 */
const printCodeDirectiveLocation = (type) => {
    if (typeof type.locations === "undefined" || type.locations.length === 0) {
        return "";
    }
    let code = ` on `;
    const separator = `\r\n  | `;
    if (type.locations.length > 1) {
        code += separator;
    }
    code += type.locations.join(separator).trim();
    return code;
};
/**
 * Prints metadata information for a GraphQL directive, focusing on its arguments.
 *
 * @param type - The GraphQL directive to process
 * @param options - Configuration options for printing directive metadata
 * @returns Formatted metadata string in MDX format or empty string if no arguments
 */
const printDirectiveMetadata = (type, options) => {
    if (!("args" in type)) {
        return "";
    }
    return (0, section_1.printMetadataSection)(type, type.args, "Arguments", options);
};
exports.printDirectiveMetadata = printDirectiveMetadata;
/**
 * Generates a string representation of a complete GraphQL directive definition.
 *
 * @param type - The GraphQL directive to process
 * @param options - Configuration options for printing the directive (optional)
 * @returns A formatted string containing the complete directive definition
 */
const printCodeDirective = (type, 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
options) => {
    let code = `directive @${(0, graphql_1.getTypeName)(type)}`;
    code += (0, code_1.printCodeArguments)(type);
    code += printCodeDirectiveLocation(type);
    return code;
};
exports.printCodeDirective = printCodeDirective;
