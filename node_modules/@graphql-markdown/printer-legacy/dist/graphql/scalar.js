"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printCodeScalar = exports.printScalarMetadata = exports.printSpecification = void 0;
const graphql_1 = require("@graphql-markdown/graphql");
const strings_1 = require("../const/strings");
const options_1 = require("../const/options");
/**
 * Generates markdown documentation for a scalar type's specification URL.
 * @param type - The GraphQL scalar type object
 * @param options - Options for printing type information
 * @returns Markdown string containing the specification link, or empty string if no URL exists
 */
const printSpecification = (type, options) => {
    if (typeof type !== "object" ||
        type === null ||
        !("specifiedByURL" in type) ||
        typeof type.specifiedByURL !== "string") {
        return "";
    }
    const url = type.specifiedByURL;
    // Needs newline between "export const specifiedByLinkCss" and markdown header to prevent compilation error in docusaurus
    return `${options_1.SectionLevels.LEVEL.repeat(3)} ${options.formatMDXSpecifiedByLink(url)}${strings_1.MARKDOWN_EOP}`;
};
exports.printSpecification = printSpecification;
/**
 * Prints metadata information for a scalar type.
 * Currently only includes the specification URL if available.
 * @param type - The GraphQL scalar type object
 * @param options - Options for printing type information
 * @returns Markdown string containing the scalar metadata
 */
const printScalarMetadata = (type, options) => {
    return (0, exports.printSpecification)(type, options);
};
exports.printScalarMetadata = printScalarMetadata;
/**
 * Generates the GraphQL SDL representation of a scalar type.
 * @param type - The GraphQL scalar type object
 * @param options - Options for printing type information (unused)
 * @returns SDL string representation of the scalar type
 */
const printCodeScalar = (type, options) => {
    return `scalar ${(0, graphql_1.getTypeName)(type)}`;
};
exports.printCodeScalar = printCodeScalar;
