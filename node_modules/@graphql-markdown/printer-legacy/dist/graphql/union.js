"use strict";
/**
 * Module for handling GraphQL Union type printing operations.
 * @module
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printCodeUnion = exports.printUnionMetadata = void 0;
const graphql_1 = require("@graphql-markdown/graphql");
const section_1 = require("../section");
/**
 * Generates metadata documentation for a GraphQL Union type.
 * @param type - The GraphQL type to process
 * @param options - Configuration options for printing
 * @returns Formatted MDX string containing the union type's possible types
 */
const printUnionMetadata = (type, options) => {
    if (!(0, graphql_1.isUnionType)(type)) {
        return "";
    }
    return (0, section_1.printSection)(type.getTypes(), "Possible types", {
        ...options,
        parentType: type.name,
    });
};
exports.printUnionMetadata = printUnionMetadata;
/**
 * Generates GraphQL SDL code representation of a Union type.
 * @param type - The GraphQL type to process
 * @param options - Configuration options for printing (unused)
 * @returns SDL string representation of the union type
 */
const printCodeUnion = (type, options) => {
    if (!(0, graphql_1.isUnionType)(type)) {
        return "";
    }
    let code = `union ${(0, graphql_1.getTypeName)(type)} = `;
    code += type
        .getTypes()
        .map((v) => {
        return (0, graphql_1.getTypeName)(v);
    })
        .join(" | ");
    return code;
};
exports.printCodeUnion = printCodeUnion;
