"use strict";
/**
 * Provides utilities for printing GraphQL enum types to Markdown/MDX format
 * @module
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printCodeEnum = exports.printEnumMetadata = void 0;
const graphql_1 = require("@graphql-markdown/graphql");
const strings_1 = require("../const/strings");
const section_1 = require("../section");
const link_1 = require("../link");
/**
 * Prints the metadata section for a GraphQL enum type.
 *
 * @param type - The GraphQL enum type to process
 * @param options - Options for printing the type
 * @returns A string containing the metadata section in MDX format, or empty string if type is not an enum
 */
const printEnumMetadata = (type, options) => {
    if (!(0, graphql_1.isEnumType)(type)) {
        return "";
    }
    return (0, section_1.printMetadataSection)(type, type.getValues(), "Values", options);
};
exports.printEnumMetadata = printEnumMetadata;
/**
 * Generates a GraphQL SDL code block for an enum type.
 *
 * @param type - The GraphQL enum type to process
 * @param options - Optional printing options that control directive handling
 * @returns A string containing the enum type definition in GraphQL SDL, or empty string if type is not an enum
 */
const printCodeEnum = (type, options) => {
    if (!(0, graphql_1.isEnumType)(type)) {
        return "";
    }
    let code = `enum ${(0, graphql_1.getTypeName)(type)} {${strings_1.MARKDOWN_EOL}`;
    code += type
        .getValues()
        .map((value) => {
        if (!(0, link_1.hasPrintableDirective)(value, options)) {
            return "";
        }
        const v = (0, graphql_1.getTypeName)(value);
        const d = (0, graphql_1.isDeprecated)(value) ? ` @${strings_1.DEPRECATED}` : "";
        return `  ${v}${d}`;
    })
        .filter((value) => {
        return value.length > 0;
    })
        .join(strings_1.MARKDOWN_EOL);
    code += `${strings_1.MARKDOWN_EOL}}`;
    return code;
};
exports.printCodeEnum = printCodeEnum;
