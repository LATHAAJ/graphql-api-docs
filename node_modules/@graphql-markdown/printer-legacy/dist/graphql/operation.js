"use strict";
/**
 * Module for handling GraphQL operation printing functionality.
 * Provides utilities to print operation types, metadata, and code representations.
 * @module
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printCodeOperation = exports.printOperationMetadata = exports.printOperationType = void 0;
const graphql_1 = require("@graphql-markdown/graphql");
const section_1 = require("../section");
const code_1 = require("../code");
/**
 * Prints the operation type information.
 * @param type - The operation type to print
 * @param options - Print type options for customizing output
 * @returns Formatted string representation of the operation type or empty string if invalid
 */
const printOperationType = (type, options) => {
    if (!(0, graphql_1.isOperation)(type)) {
        return "";
    }
    const queryType = (0, graphql_1.getTypeName)(type.type).replace(/[![\]]*/g, "");
    return (0, section_1.printSection)([options.schema.getType(queryType)], "Type", {
        ...options,
        parentTypePrefix: false,
    });
};
exports.printOperationType = printOperationType;
/**
 * Prints the operation metadata including arguments and type information.
 * @param type - The operation type to print metadata for
 * @param options - Print type options for customizing output
 * @returns Formatted string containing operation metadata or empty string if invalid
 */
const printOperationMetadata = (type, options) => {
    if (!(0, graphql_1.isOperation)(type)) {
        return "";
    }
    const response = (0, exports.printOperationType)(type, options);
    const metadata = (0, section_1.printMetadataSection)(type, type.args, "Arguments", options);
    return `${metadata}${response}`;
};
exports.printOperationMetadata = printOperationMetadata;
/**
 * Prints the code representation of an operation.
 * @see printCodeField
 */
exports.printCodeOperation = code_1.printCodeField;
