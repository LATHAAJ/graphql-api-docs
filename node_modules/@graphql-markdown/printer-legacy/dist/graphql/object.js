"use strict";
/**
 * GraphQL Object Type printing utilities
 * @module
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printCodeObject = exports.printCodeType = exports.printObjectMetadata = void 0;
const graphql_1 = require("@graphql-markdown/graphql");
const section_1 = require("../section");
const code_1 = require("../code");
const strings_1 = require("../const/strings");
/**
 * Prints the metadata section for interfaces implemented by a GraphQL type
 * @param type - The GraphQL type object to process
 * @param options - Printing options
 * @returns Markdown formatted string of implemented interfaces
 */
const printImplementedInterfaceMetadata = (type, options) => {
    if (typeof type !== "object" ||
        type === null ||
        !("getInterfaces" in type) ||
        typeof type.getInterfaces !== "function") {
        return "";
    }
    return (0, section_1.printSection)(type.getInterfaces(), "Interfaces", options);
};
/**
 * Prints the complete metadata section for a GraphQL object type
 * @param type - The GraphQL type object to process
 * @param options - Printing options
 * @returns Markdown formatted string containing fields and interfaces metadata
 */
const printObjectMetadata = (type, options) => {
    const interfaceMeta = printImplementedInterfaceMetadata(type, options);
    const metadata = (0, section_1.printMetadataSection)(type, (0, graphql_1.getFields)(type), "Fields", options);
    return `${metadata}${interfaceMeta}`;
};
exports.printObjectMetadata = printObjectMetadata;
/**
 * Prints the GraphQL type definition as a code block
 * @param type - The GraphQL type object to process
 * @param entity - The entity type identifier (e.g., "type", "interface")
 * @param options - Printing options
 * @returns GraphQL type definition as a code block string
 */
const printCodeType = (type, entity, options) => {
    if (typeof type !== "object" || type === null) {
        return "";
    }
    const name = (0, graphql_1.getTypeName)(type);
    const extendsInterface = "getInterfaces" in type &&
        typeof type.getInterfaces === "function" &&
        type.getInterfaces().length > 0
        ? ` implements ${type
            .getInterfaces()
            .map((field) => {
            return (0, graphql_1.getTypeName)(field);
        })
            .join(", ")}`
        : "";
    const typeFields = (0, graphql_1.getFields)(type)
        .map((field) => {
        const f = (0, code_1.printCodeField)(field, options, 1);
        return f.length > 0 ? `${strings_1.MARKDOWN_CODE_INDENTATION}${f}` : "";
    })
        .filter((field) => {
        return field.length > 0;
    })
        .join("");
    return `${entity} ${name}${extendsInterface} {${strings_1.MARKDOWN_EOL}${typeFields}}`;
};
exports.printCodeType = printCodeType;
/**
 * Prints a GraphQL object type definition as a code block
 * @param type - The GraphQL type object to process
 * @param options - Printing options
 * @returns GraphQL object type definition as a code block string
 */
const printCodeObject = (type, options) => {
    return (0, exports.printCodeType)(type, "type", options);
};
exports.printCodeObject = printCodeObject;
