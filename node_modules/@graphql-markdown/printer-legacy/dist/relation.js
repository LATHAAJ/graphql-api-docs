"use strict";
/**
 * This module provides functionality to print relationships between GraphQL types,
 * including return types, member fields, and implementations, in a formatted MDX string output.
 * @module
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printRelations = exports.printRelationOf = exports.getRootTypeLocaleFromString = void 0;
const graphql_1 = require("@graphql-markdown/graphql");
const link_1 = require("./link");
const badge_1 = require("./badge");
const strings_1 = require("./const/strings");
const options_1 = require("./const/options");
/**
 * Converts a string representation of a root type to its corresponding TypeLocale
 * @param text - The string to convert to a TypeLocale
 * @returns The matching TypeLocale if found, undefined otherwise
 * @example
 * ```ts
 * const locale = getRootTypeLocaleFromString('Query');
 * ```
 */
const getRootTypeLocaleFromString = (text) => {
    for (const [type, props] of Object.entries(strings_1.ROOT_TYPE_LOCALE)) {
        if (Object.values(props).includes(text)) {
            return strings_1.ROOT_TYPE_LOCALE[type];
        }
    }
    return undefined;
};
exports.getRootTypeLocaleFromString = getRootTypeLocaleFromString;
/**
 * Prints the relation section for a specific type and relation category
 * @template T - Type of the relation
 * @param type - The GraphQL type to get relations for
 * @param section - The section title for the relation
 * @param getRelation - Function to retrieve relations of type T
 * @param options - Printing options for type formatting
 * @returns {MDXString | string} Formatted MDX string containing the relations or empty string if no relations found
 * @throws {Error} If the schema is not provided in options
 * @example
 * ```ts
 * const mdx = printRelationOf(type, "Member Of", getRelationOfField, options);
 * ```
 */
const printRelationOf = (type, section, getRelation, options) => {
    if (!(0, graphql_1.isNamedType)(type) ||
        (0, graphql_1.isOperation)(type) ||
        !options.schema ||
        typeof getRelation !== "function") {
        return "";
    }
    const schemaMap = (0, graphql_1.getSchemaMap)(options.schema);
    const relations = getRelation(type, schemaMap);
    if (!relations) {
        return "";
    }
    let data = [];
    for (const [relation, types] of Object.entries(relations)) {
        if (types.length === 0) {
            continue;
        }
        const category = (0, exports.getRootTypeLocaleFromString)(relation);
        const badge = (0, badge_1.printBadge)({
            text: category,
            classname: badge_1.CSS_BADGE_CLASSNAME.RELATION,
        }, options);
        data = data.concat(types.map((t) => {
            const link = (0, link_1.getRelationLink)(category, t, options);
            return link ? `[\`${link.text}\`](${link.url})  ${badge}` : "";
        }));
    }
    if (data.length === 0) {
        return "";
    }
    const content = [...data]
        .sort((a, b) => {
        return a.localeCompare(b);
    })
        .join(options.formatMDXBullet());
    return `${options_1.SectionLevels.LEVEL.repeat(3)} ${section}${strings_1.MARKDOWN_EOP}${content}${strings_1.MARKDOWN_EOP}`;
};
exports.printRelationOf = printRelationOf;
/**
 * Prints all relations (return types, member fields, and implementations) for a given type
 * @param type - The GraphQL type to get all relations for
 * @param options - Printing options for type formatting
 * @returns Formatted MDX string containing all relations or empty string if no relations found
 * @throws If the schema is not provided in options
 * @example
 * ```ts
 * const relations = printRelations(myType, { schema, formatMDXBullet: () => "* " });
 * ```
 */
const printRelations = (type, options) => {
    const relations = {
        returnedBy: { section: "Returned By", getRelation: graphql_1.getRelationOfReturn },
        memberOf: { section: "Member Of", getRelation: graphql_1.getRelationOfField },
        implementedBy: {
            section: "Implemented By",
            getRelation: graphql_1.getRelationOfImplementation,
        },
    };
    let data = "";
    for (const { section, getRelation } of Object.values(relations)) {
        data += (0, exports.printRelationOf)(type, section, getRelation, options);
    }
    return data;
};
exports.printRelations = printRelations;
