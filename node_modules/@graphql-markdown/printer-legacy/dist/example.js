"use strict";
/**
 * Module providing utilities for handling GraphQL example directives and printing example values.
 *
 * @packageDocumentation
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printExample = exports.getDirectiveExampleOption = void 0;
const graphql_1 = require("@graphql-markdown/graphql");
const utils_1 = require("@graphql-markdown/utils");
const link_1 = require("./link");
/**
 * Retrieves directive example options from the provided print type options.
 *
 * @param options - Configuration options
 * @returns The directive example configuration if valid, otherwise `undefined`
 */
const getDirectiveExampleOption = ({ exampleSection, schema, }) => {
    let directiveName = "example", argName = "value", parserFunc = undefined;
    if (exampleSection && typeof exampleSection === "object") {
        if ("directive" in exampleSection && exampleSection.directive) {
            directiveName = exampleSection.directive;
        }
        if ("field" in exampleSection && exampleSection.field) {
            argName = exampleSection.field;
        }
        if ("parser" in exampleSection && exampleSection.parser) {
            parserFunc = exampleSection.parser;
        }
    }
    const directive = schema && (0, graphql_1.instanceOf)(schema, graphql_1.GraphQLSchema)
        ? schema.getDirective(directiveName)
        : undefined;
    if (!directive) {
        return undefined;
    }
    return {
        directive,
        field: argName,
        parser: parserFunc,
    };
};
exports.getDirectiveExampleOption = getDirectiveExampleOption;
/**
 * Parses fields of a GraphQL type to generate example values.
 *
 * @internal
 * @param type - The GraphQL type to parse
 * @param options - Print type options for configuration
 * @param mappedTypes - Array of already processed type names to prevent recursion
 * @returns Record of field names and their example values, or `undefined`
 */
const parseTypeFields = (type, options, mappedTypes = []) => {
    const directiveExample = (0, exports.getDirectiveExampleOption)(options);
    if (!directiveExample) {
        return undefined;
    }
    const fields = (0, graphql_1.getFields)(type);
    if (fields.length === 0) {
        return undefined;
    }
    let example = {};
    fields
        .filter((field) => {
        return (0, link_1.hasPrintableDirective)(field, options);
    })
        .forEach((field) => {
        const fieldType = (0, graphql_1.hasDirective)(field, [directiveExample.directive])
            ? field
            : field.type;
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        const value = parseExampleDirective(fieldType, options, mappedTypes);
        let structuredValue = value;
        if ((0, graphql_1.isListType)((0, graphql_1.getNullableType)(fieldType))) {
            if (!value && (0, graphql_1.isNonNullType)(fieldType)) {
                structuredValue = [];
            }
            else {
                structuredValue = value ? [value] : undefined;
            }
        }
        example = {
            ...example,
            [field.name]: structuredValue,
        };
    });
    return example;
};
/**
 * Parses example value from a string into appropriate type.
 *
 * @internal
 * @param value - The raw example value
 * @param type - The GraphQL type or operation
 * @returns Parsed value, or `undefined` if parsing fails
 */
const parseExampleValue = (value, type) => {
    if (!value || typeof value !== "string") {
        return undefined;
    }
    try {
        return JSON.parse(value);
    }
    catch {
        if ((0, graphql_1.isOperation)(type)) {
            try {
                return (0, graphql_1.parse)(value, { noLocation: true });
            }
            catch {
                /* empty */
            }
        }
    }
    return value;
};
/**
 * Parses example directive from a GraphQL type or operation.
 *
 * @internal
 * @param type - The GraphQL type or operation to parse
 * @param options - Print type options for configuration
 * @param mappedTypes - Array of already processed type names to prevent recursion
 * @returns Parsed example value, or `undefined`
 */
const parseExampleDirective = (type, options, mappedTypes = []) => {
    const directiveExample = (0, exports.getDirectiveExampleOption)(options);
    if (!directiveExample || !(0, link_1.hasPrintableDirective)(type, options)) {
        return undefined;
    }
    const parser = typeof directiveExample.parser === "function"
        ? directiveExample.parser
        : parseExampleValue;
    // get parent type
    const namedType = (0, graphql_1.isType)(type) ? (0, graphql_1.getNamedType)(type) : type;
    if (!namedType) {
        return undefined;
    }
    // get type name
    const typename = (0, graphql_1.isType)(namedType)
        ? (0, utils_1.toString)(namedType)
        : (0, utils_1.toString)(namedType.name);
    // recursion check
    if (mappedTypes.includes(typename)) {
        return undefined;
    }
    mappedTypes.push(typename);
    try {
        const arg = (0, graphql_1.getTypeDirectiveArgValue)(directiveExample.directive, namedType, directiveExample.field);
        return parser(arg, namedType);
    }
    catch (err) {
        if (err instanceof graphql_1.IntrospectionError) {
            if (!(0, graphql_1.isType)(namedType)) {
                return undefined;
            }
            return parseTypeFields(namedType, options, mappedTypes);
        }
        throw err;
    }
};
/**
 * Prints an example value for a given GraphQL type or operation.
 *
 * @param type - The GraphQL type or operation to generate an example for
 * @param options - Configuration options for printing the example
 * @returns Stringified example if available, otherwise `undefined`
 *
 * @example
 * ```ts
 * const example = printExample(type, { schema, exampleSection });
 * if (example) {
 *   console.log(example);
 * }
 * ```
 */
const printExample = (type, options) => {
    if (!(0, graphql_1.isType)(type) && !(0, graphql_1.isOperation)(type)) {
        return undefined;
    }
    const example = parseExampleDirective(type, options);
    if (!example) {
        return undefined;
    }
    if ((0, graphql_1.isOperation)(type) && (0, graphql_1.isNode)(example)) {
        return (0, graphql_1.print)(example);
    }
    return JSON.stringify(example, undefined, 2);
};
exports.printExample = printExample;
