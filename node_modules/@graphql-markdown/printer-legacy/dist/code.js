"use strict";
/**
 * Provides utility functions for generating code representations of GraphQL types
 * in Markdown format. This module handles the formatting of arguments and fields
 * with proper indentation and deprecation notices.
 * @module
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printCodeField = exports.printCodeArguments = void 0;
const graphql_1 = require("@graphql-markdown/graphql");
const strings_1 = require("./const/strings");
const link_1 = require("./link");
/**
 * Generates a string representation of GraphQL arguments with proper formatting and indentation.
 *
 * @param type - The GraphQL type object containing arguments to print
 * @param indentationLevel - The level of indentation to apply (default: 1)
 * @returns A formatted string of arguments or an empty string if no arguments exist
 * @example
 * ```
 * printCodeArguments({ args: [{ name: 'id', type: 'ID!' }] })
 * // Returns:
 * // (
 * //   id: ID!
 * // )
 * ```
 */
const printCodeArguments = (type, indentationLevel = 1) => {
    if (typeof type !== "object" ||
        type === null ||
        !("args" in type) ||
        !Array.isArray(type.args) ||
        type.args.length === 0) {
        return "";
    }
    const argIndentation = strings_1.MARKDOWN_CODE_INDENTATION.repeat(indentationLevel);
    const parentIndentation = indentationLevel === 1 ? "" : strings_1.MARKDOWN_CODE_INDENTATION;
    let code = `(${strings_1.MARKDOWN_EOL}`;
    code += type.args.reduce((r, v) => {
        const defaultValue = (0, graphql_1.getFormattedDefaultValue)(v);
        const hasDefaultValue = typeof defaultValue !== "undefined" && defaultValue !== null;
        const printedDefault = hasDefaultValue
            ? ` = ${(0, graphql_1.getFormattedDefaultValue)(v)}`
            : "";
        const propType = String(v.type);
        const propName = String(v.name);
        return `${r}${argIndentation}${propName}: ${propType}${printedDefault}${strings_1.MARKDOWN_EOL}`;
    }, "");
    code += `${parentIndentation})`;
    return code;
};
exports.printCodeArguments = printCodeArguments;
/**
 * Generates a string representation of a GraphQL field including its arguments,
 * return type, and deprecation status.
 *
 * @param type - The GraphQL field type object to print
 * @param options - Optional configuration for printing the type
 * @param indentationLevel - The level of indentation to apply (default: 0)
 * @returns A formatted string representing the field or an empty string if the field should not be printed
 * @example
 * ```
 * printCodeField({ name: 'user', type: 'User!', args: [{ name: 'id', type: 'ID!' }] })
 * // Returns: user(
 * //   id: ID!
 * // ): User!
 * ```
 */
const printCodeField = (type, options, indentationLevel = 0) => {
    if (typeof type !== "object" || type === null || !("type" in type)) {
        return "";
    }
    if (!(0, link_1.hasPrintableDirective)(type, options)) {
        return "";
    }
    let code = `${(0, graphql_1.getTypeName)(type)}`;
    code += (0, exports.printCodeArguments)(type, indentationLevel + 1);
    code += `: ${(0, graphql_1.getTypeName)(type.type)}`;
    code += (0, graphql_1.isDeprecated)(type) ? ` @${strings_1.DEPRECATED}` : "";
    code += strings_1.MARKDOWN_EOL;
    return code;
};
exports.printCodeField = printCodeField;
