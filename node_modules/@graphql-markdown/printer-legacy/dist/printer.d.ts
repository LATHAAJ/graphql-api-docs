/**
 * GraphQL Schema Printer Module
 *
 * This module provides functionality for printing GraphQL schema types into Markdown documentation.
 * It includes utilities for handling various GraphQL types, custom directives, and formatting options.
 *
 * @module printer
 * @packageDocumentation
 */
import type { CustomDirectiveMap, GraphQLDirective, GraphQLSchema, IPrinter, MDXString, MDXSupportType, Maybe, MetaOptions, PrintTypeOptions, PrinterConfigPrintTypeOptions, SchemaEntitiesGroupMap, TypeDeprecatedOption } from "@graphql-markdown/types";
/**
 * The Printer class implements the core functionality for generating Markdown documentation
 * from GraphQL schema types.
 *
 * @remarks
 * This class provides static methods for rendering different components of the documentation:
 * - Headers and frontmatter
 * - Type descriptions and code blocks
 * - Custom directives and metadata
 * - Examples and relations
 *
 * @example
 * ```typescript
 * const printer = new Printer();
 * await printer.init(schema, '/docs', 'graphql', options);
 * const docs = printer.printType('Query', queryType);
 * ```
 */
export declare class Printer implements IPrinter {
    /**
     * Global printer configuration options
     * @static
     */
    static options: Readonly<Maybe<PrintTypeOptions>>;
    /**
     * Prints type descriptions
     * @static
     */
    static readonly printDescription: (type: unknown, options: PrintTypeOptions, noText?: string) => MDXString | string;
    /**
     * Prints custom directives
     * @static
     */
    static readonly printCustomDirectives: (type: unknown, options: PrintTypeOptions) => string;
    /**
     * Prints custom tags
     * @static
     */
    static readonly printCustomTags: (type: unknown, options: PrintTypeOptions) => MDXString | string;
    /**
     * MDX module configuration
     * @static
     */
    static printMDXModule: Readonly<MDXSupportType>;
    /**
     * Initializes the printer with the given schema and configuration.
     *
     * @param schema - GraphQL schema to generate documentation for
     * @param baseURL - Base URL path for documentation, e.g. '/docs'
     * @param linkRoot - Root path for generating links between types
     * @param options - Configuration options for the printer
     * @param mdxParser - Optional MDX parser module for MDX output support
     */
    static init(schema: Maybe<GraphQLSchema>, baseURL?: Maybe<string>, linkRoot?: Maybe<string>, { customDirectives, groups, meta, metatags, onlyDocDirectives, printTypeOptions, skipDocDirectives, }?: {
        customDirectives?: CustomDirectiveMap;
        deprecated?: TypeDeprecatedOption;
        groups?: SchemaEntitiesGroupMap;
        meta?: Maybe<MetaOptions>;
        metatags?: Record<string, string>[];
        onlyDocDirectives?: GraphQLDirective[];
        printTypeOptions?: PrinterConfigPrintTypeOptions;
        skipDocDirectives?: GraphQLDirective[];
    }, mdxParser?: Record<string, unknown>): Promise<void>;
    /**
     * Prints the header section of a type documentation
     *
     * @param id - Unique identifier for the type
     * @param title - Display title for the type
     * @param options - Printer configuration options
     * @returns Formatted header string with optional frontmatter
     */
    static readonly printHeader: (id: string, title: string, options: PrintTypeOptions) => string;
    /**
     * Prints the GraphQL type definition as code block
     *
     * @param type - GraphQL type to print
     * @param options - Printer configuration options
     * @returns Formatted code block string with type definition
     */
    static readonly printCode: (type: unknown, options: PrintTypeOptions) => string;
    /**
     * Prints example usage of the type if available
     *
     * @param type - GraphQL type to generate example for
     * @param options - Printer configuration options
     * @returns Formatted example section string or empty string if no example
     */
    static readonly printExample: (type: unknown, options: PrintTypeOptions) => string;
    /**
     * Prints metadata information for a GraphQL type
     *
     * @param type - GraphQL type to print metadata for
     * @param options - Printer configuration options
     * @returns Formatted metadata string as MDX or plain string
     * @throws {Error} When type is not supported
     */
    static readonly printTypeMetadata: (type: unknown, options: PrintTypeOptions) => MDXString | string;
    /**
     * Prints related type information
     *
     * @param type - GraphQL type to find relations for
     * @param options - Printer configuration options
     * @returns Formatted relations section as MDX or plain string
     */
    static readonly printRelations: (type: unknown, options: PrintTypeOptions) => MDXString | string;
    /**
     * Prints HTML meta tags for the documentation
     *
     * @param _type - GraphQL type (unused)
     * @param options - Printer configuration options containing metatags
     * @returns Formatted HTML meta tags string
     */
    static readonly printMetaTags: (_type: unknown, { metatags }: PrintTypeOptions) => MDXString | string;
    /**
     * Main method to print complete documentation for a GraphQL type
     *
     * @param name - Name identifier for the type
     * @param type - GraphQL type to generate documentation for
     * @param options - Optional printer configuration options
     * @returns Complete documentation as MDX string or undefined if type should be skipped
     *
     * @example
     * ```typescript
     * const doc = Printer.printType('User', UserType, {
     *   frontMatter: true,
     *   codeSection: true
     * });
     * ```
     *
     * @remarks
     * The method combines multiple sections:
     * - Header with frontmatter
     * - Meta tags
     * - Description
     * - Code definition
     * - Custom directives
     * - Type metadata
     * - Example usage
     * - Related types
     */
    static readonly printType: (name: Maybe<string>, type: unknown, options?: Maybe<Partial<PrintTypeOptions>>) => Maybe<MDXString>;
}
