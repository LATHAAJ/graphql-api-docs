/**
 * Module for handling links and link-related operations in GraphQL Markdown printer.
 * Provides utilities for creating, formatting, and managing links to GraphQL types and operations.
 * @packageDocumentation
 */
import type { ApiGroupOverrideType, MDXString, Maybe, PrintLinkOptions, PrintTypeOptions, TypeDeprecatedOption, TypeLink, TypeLocale } from "@graphql-markdown/types";
export declare const API_GROUPS: Required<ApiGroupOverrideType>;
/**
 * Checks if a type has printable directives based on the provided options.
 *
 * @param type - The GraphQL type to check
 * @param options - Configuration options for directive printing
 * @param options.deprecated - How to handle deprecated types
 * @param options.onlyDocDirectives - Only print types with specific directives
 * @param options.skipDocDirectives - Skip types with specific directives
 * @returns `true` if the type should be printed, `false` otherwise
 */
export declare const hasPrintableDirective: (type: unknown, options?: Pick<PrintTypeOptions, "deprecated" | "onlyDocDirectives" | "skipDocDirectives">) => boolean;
/**
 * Gets the locale category for a given GraphQL type.
 *
 * @param type - The GraphQL type to get the category for
 * @returns The locale category for the type, or `undefined` if not found
 */
export declare const getCategoryLocale: (type: unknown) => Maybe<TypeLocale>;
/**
 * Gets the folder name for a link category based on the GraphQL type and operation locale.
 *
 * @param type - The GraphQL type to get the folder name for
 * @param operationLocale - The locale of the operation
 * @returns The folder name for the link category, or `undefined` if not found
 */
export declare const getLinkCategoryFolder: (type: unknown, operationLocale?: Maybe<TypeLocale>) => Maybe<string>;
/**
 * Checks if the options include the `withAttributes` attribute.
 *
 * @param options - The options to check
 * @returns `true` if the options include `withAttributes`, `false` otherwise
 */
export declare const hasOptionWithAttributes: (options: PrintLinkOptions) => boolean;
/**
 * Checks if the options include the `parentTypePrefix` attribute.
 *
 * @param options - The options to check
 * @returns `true` if the options include `parentTypePrefix`, `false` otherwise
 */
export declare const hasOptionParentType: (options: PrintLinkOptions) => boolean;
/**
 * Gets the folder name for an API group based on the GraphQL type and group options.
 *
 * @param type - The GraphQL type to get the folder name for
 * @param groups - The group options
 * @returns The folder name for the API group
 */
export declare const getLinkApiGroupFolder: (type: unknown, groups?: Maybe<ApiGroupOverrideType | boolean>) => string;
/**
 * Gets the folder name for deprecated types based on the GraphQL type and deprecation option.
 *
 * @param type - The GraphQL type to get the folder name for
 * @param option - The deprecation option
 * @returns The folder name for deprecated types
 */
export declare const getLinkDeprecatedFolder: (type: unknown, option: Maybe<TypeDeprecatedOption>) => string;
/**
 * Converts a GraphQL type to a link object.
 *
 * @param type - The GraphQL type to convert
 * @param name - The name of the type
 * @param operation - The locale of the operation
 * @param options - Configuration options for link generation
 * @returns The link object for the type
 */
export declare const toLink: (type: unknown, name: string, operation: Maybe<TypeLocale>, options: PrintLinkOptions) => TypeLink;
/**
 * Gets the link for a relation based on the category, type, and options.
 *
 * @param category - The locale category of the relation
 * @param type - The GraphQL type of the relation
 * @param options - Configuration options for link generation
 * @returns The link object for the relation, or `undefined` if not found
 */
export declare const getRelationLink: (category: Maybe<TypeLocale>, type: unknown, options: PrintLinkOptions) => Maybe<TypeLink>;
/**
 * Prints the attributes of a link based on the GraphQL type.
 *
 * @param type - The GraphQL type to print attributes for
 * @param text - The text to append attributes to
 * @returns The text with appended attributes
 */
export declare const printLinkAttributes: (type: unknown, text?: Maybe<string>) => string;
/**
 * Prints a link for a GraphQL type based on the provided options.
 *
 * @param type - The GraphQL type to print a link for
 * @param options - Configuration options for link generation
 * @returns The formatted link as a string
 */
export declare const printLink: (type: unknown, options: PrintLinkOptions) => string;
/**
 * Prints a parent link for a GraphQL type based on the provided options.
 *
 * @param type - The GraphQL type to print a parent link for
 * @param options - Configuration options for link generation
 * @returns The formatted parent link as a string or MDX string
 */
export declare const printParentLink: (type: unknown, options: PrintLinkOptions) => MDXString | string;
