"use strict";
/**
 * Module responsible for generating Markdown sections for GraphQL schema documentation.
 * Handles the printing of section items, metadata, and structured documentation content.
 * @module section
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printMetadataSection = exports.printSection = exports.printSectionItems = exports.printSectionItem = void 0;
const graphql_1 = require("@graphql-markdown/graphql");
const common_1 = require("./common");
const badge_1 = require("./badge");
const link_1 = require("./link");
const directive_1 = require("./directive");
const strings_1 = require("./const/strings");
const options_1 = require("./const/options");
/**
 * Prints a single section item with its associated metadata.
 *
 * @param type - The GraphQL type or field to print
 * @param options - Configuration options for printing
 * @returns Formatted MDX string containing the section item
 *
 * @template T - Type of the GraphQL element being printed
 */
const printSectionItem = (type, options) => {
    const level = "level" in options && typeof options.level === "number" ? options.level : 4;
    if (!(0, link_1.hasPrintableDirective)(type, options)) {
        return "";
    }
    const typeNameLink = (0, link_1.printLink)(type, {
        ...options,
        withAttributes: false,
    });
    const badges = (0, badge_1.printBadges)(type, options);
    const tags = (0, directive_1.printCustomTags)(type, options);
    const parentTypeLink = (0, link_1.printParentLink)(type, options);
    const title = `${options_1.SectionLevels.LEVEL.repeat(level)} ${typeNameLink}${parentTypeLink} ${badges} ${tags}${strings_1.MARKDOWN_EOL}`;
    const description = (0, common_1.printDescription)(type, options, "")
        .trim()
        .replaceAll("\n", `${strings_1.MARKDOWN_EOL}`);
    let section = `${title}${description}${strings_1.MARKDOWN_EOL}`;
    if ((0, graphql_1.isGraphQLFieldType)(type)) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        section += (0, exports.printSectionItems)(type.args, {
            ...options,
            level: 5,
            parentType: typeof options.parentType === "undefined"
                ? type.name
                : `${options.parentType}.${type.name}`,
        });
    }
    return section;
};
exports.printSectionItem = printSectionItem;
/**
 * Prints an array of section items with consistent formatting.
 *
 * @param values - Single value or array of values to print as section items
 * @param options - Configuration options for printing
 * @returns Formatted MDX string containing all section items
 *
 * @template V - Type of the values being printed
 */
const printSectionItems = (values, options) => {
    if (!Array.isArray(values) || values.length === 0) {
        return "";
    }
    const level = ("level" in options && typeof options.level === "number" ? options.level : 4);
    return values
        .map((v) => {
        return (v &&
            (0, exports.printSectionItem)(v, {
                ...options,
                level,
            }));
    })
        .join(strings_1.MARKDOWN_EOP);
};
exports.printSectionItems = printSectionItems;
/**
 * Prints a complete section with title and content.
 *
 * @param values - Array of values to include in the section
 * @param section - Section title/header
 * @param options - Configuration options for printing
 * @returns Formatted MDX string containing the complete section
 *
 * @template V - Type of the values being printed
 */
const printSection = (values, section, options) => {
    if (!Array.isArray(values) || values.length === 0) {
        return "";
    }
    const level = ("level" in options && typeof options.level === "number" ? options.level : 3);
    const [openSection, closeSection] = (() => {
        if (typeof options.collapsible?.dataOpen === "string" &&
            typeof options.collapsible.dataClose === "string") {
            return options.formatMDXDetails(options.collapsible).split(`\r`);
        }
        return [strings_1.MARKDOWN_EOP, strings_1.MARKDOWN_EOP];
    })();
    const items = (0, exports.printSectionItems)(values, {
        ...options,
        collapsible: undefined, // do not propagate collapsible
        level: level >= 3 && level <= 5 ? (level + 1) : undefined,
    });
    if (items === "") {
        return ""; // do not print section is no items printed
    }
    return `${options_1.SectionLevels.LEVEL.repeat(level)} ${section}${openSection}${items}${closeSection}`;
};
exports.printSection = printSection;
/**
 * Prints a metadata section with special handling for deprecated items.
 *
 * @param type - The parent type containing the metadata
 * @param values - Values to include in the metadata section
 * @param section - Section title/header
 * @param options - Configuration options for printing
 * @returns Formatted MDX string containing the metadata section
 *
 * @template T - Type of the parent element
 * @template V - Type of the values being printed
 */
const printMetadataSection = (type, values, section, options) => {
    if (typeof type !== "object" ||
        type === null ||
        !("name" in type) ||
        !Array.isArray(values) ||
        values.length === 0) {
        return "";
    }
    switch (options.deprecated) {
        case "group": {
            const { fields, deprecated } = values.reduce((res, arg) => {
                if ((0, graphql_1.isDeprecated)(arg)) {
                    res.deprecated.push(arg);
                }
                else {
                    res.fields.push(arg);
                }
                return res;
            }, { fields: [], deprecated: [] });
            const meta = (0, exports.printSection)(fields, section, {
                ...options,
                parentType: type.name,
            });
            const deprecatedMeta = (0, exports.printSection)(deprecated, "", {
                ...options,
                parentType: type.name,
                level: 0,
                collapsible: {
                    dataOpen: strings_1.DEPRECATED,
                    dataClose: strings_1.DEPRECATED,
                },
            });
            return `${meta}${deprecatedMeta}`;
        }
        case "default":
        default:
            return (0, exports.printSection)(values, section, {
                ...options,
                parentType: type.name,
            });
    }
};
exports.printMetadataSection = printMetadataSection;
