"use strict";
/**
 * Common printer utility functions for handling descriptions, directives, and warnings.
 * @module
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printDescription = exports.printDeprecation = exports.printWarning = exports.formatDescription = exports.printCustomDirectives = void 0;
const utils_1 = require("@graphql-markdown/utils");
const graphql_1 = require("@graphql-markdown/graphql");
const strings_1 = require("./const/strings");
const directive_1 = require("./directive");
/**
 * Prints documentation for custom directives applied to a type.
 *
 * @param type - GraphQL type to get directives from
 * @param options - Printer configuration options
 * @returns Formatted directive documentation string
 */
const printCustomDirectives = (type, options) => {
    const constDirectiveMap = (0, graphql_1.getConstDirectiveMap)(type, options?.customDirectives);
    if ((0, utils_1.isEmpty)(constDirectiveMap)) {
        return "";
    }
    const content = Object.values(constDirectiveMap)
        .map((constDirectiveOption) => {
        return (0, directive_1.getCustomDirectiveResolver)("descriptor", type, constDirectiveOption, "");
    })
        .filter((text) => {
        return typeof text === "string" && text.length > 0;
    })
        .map((text) => {
        return (0, utils_1.escapeMDX)(text);
    })
        .join(strings_1.MARKDOWN_EOP);
    return `${strings_1.MARKDOWN_EOP}${content}`;
};
exports.printCustomDirectives = printCustomDirectives;
/**
 * Formats a GraphQL type description or falls back to a default message.
 *
 * @param type - GraphQL type to get description from
 * @param replacement - Optional fallback text if no description exists
 * @returns Formatted description string or MDX content
 */
const formatDescription = (type, replacement = strings_1.NO_DESCRIPTION_TEXT) => {
    if (typeof type !== "object" || type === null) {
        return `${strings_1.MARKDOWN_EOP}${(0, utils_1.escapeMDX)(replacement)}`;
    }
    const description = "description" in type && typeof type.description === "string"
        ? type.description
        : replacement;
    return `${strings_1.MARKDOWN_EOP}${(0, utils_1.escapeMDX)(description)}`;
};
exports.formatDescription = formatDescription;
/**
 * Generates a warning message block in MDX format.
 * @param param0 - Warning configuration object
 * @param param0.text - The warning message text
 * @param param0.title - Optional title for the warning block
 * @param options - Configuration options for printing
 * @returns Formatted warning message as MDX string
 */
const printWarning = ({ text, title }, options) => {
    const formattedText = typeof text !== "string" || text.trim() === ""
        ? strings_1.MARKDOWN_EOP
        : `${strings_1.MARKDOWN_EOP}${text}${strings_1.MARKDOWN_EOP}`;
    return options.formatMDXAdmonition({ text: formattedText, type: "warning", icon: "⚠️", title }, options.meta);
};
exports.printWarning = printWarning;
/**
 * Prints deprecation information for a GraphQL type if it is deprecated.
 * @param type - The GraphQL type to check for deprecation
 * @param options - Configuration options for printing
 * @returns Formatted deprecation warning as MDX string, or empty string if not deprecated
 */
const printDeprecation = (type, options) => {
    if (typeof type !== "object" || type === null || !(0, graphql_1.isDeprecated)(type)) {
        return "";
    }
    const reason = "deprecationReason" in type && typeof type.deprecationReason === "string"
        ? (0, utils_1.escapeMDX)(type.deprecationReason)
        : "";
    return (0, exports.printWarning)({ text: reason, title: strings_1.DEPRECATED.toUpperCase() }, options);
};
exports.printDeprecation = printDeprecation;
/**
 * Prints the complete description for a GraphQL type, including deprecation warnings and custom directives.
 * @param type - The GraphQL type to document
 * @param options - Configuration options for printing
 * @param noText - Optional text to display when no description exists
 * @returns Combined description, deprecation notices, and custom directives as MDX content
 */
const printDescription = (type, options, noText) => {
    const description = (0, exports.formatDescription)(type, noText);
    const customDirectives = (0, exports.printCustomDirectives)(type, options);
    const deprecation = (0, exports.printDeprecation)(type, options);
    return `${deprecation}${description}${customDirectives}`;
};
exports.printDescription = printDescription;
